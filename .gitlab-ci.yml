image: registry.gitlab.procivis.ch/procivis/one/one-operations/core-base:1.74.0

variables:
  DOCKER_DRIVER: overlay2
  DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Core"
  CI_TAG_PATTERN: /^v[0-9]+\.[0-9]+\.[0-9]+-.+$/

  # Required variables in GitLab config:
  # - AAD_SERVICE_PRINCIPAL_CLIENT_ID: Azure Active directory Application id. Use for RBAC SP kubelogin
  # - AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: Application secret. Use for RBAC SP kubelogin
  # - AD_TENANT_ID: Azure Active Directory Tenant ID
  # - RESOURCE_GROUP: Azure Resource group where AKS deployed
  # - CLUSTER_NAME: AKS cluster name
  # - DOCKER_AUTH_CONFIG: Pull image from private repository
  # - BITRISE_API_ACCESS_TOKEN: Bitrise access token for IOS sdk build
  # - AZURE_STORAGE_ACCOUNT: storage account for sdk build upload
  # - AZURE_STORAGE_KEY: storage account key
  # - PGP_PRIVATE_KEY: helm-secrets
  # - DEPENDENCY_TRACK_BASE_URL: Base url for SBOM scanning
  # - DEPENDENCY_TRACK_API_KEY: Api key for api access


workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

stages:
  - build
  - test
  - manual_e2e_tests
  - scan
  - publish
  - deploy
  - sdk_build
  - sdk_artifact
  - e2e_tests

before_script:
  - APP_FLAVOR=$(echo $CI_COMMIT_TAG | sed -n "s/^v.*-\(.*\)$/\1/p")
  - APP_FLAVOR=${APP_FLAVOR:-procivis}
  - APP_VERSION=$(echo $CI_COMMIT_TAG | sed -n "s/^\(v.*\)-.*$/\1/p")
  - APP_VERSION=${APP_VERSION:-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA}
  - IMAGE_NAME=$CI_REGISTRY_IMAGE/$APP_FLAVOR
  - IMAGE_TAG=$IMAGE_NAME:$APP_VERSION
  - D_TRACK_PROJECT_VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}

.only_main_or_tag:
  rules:
    - if: $CI_COMMIT_TAG =~ $CI_TAG_PATTERN
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release"

.only_main_or_tag_manual:
  when: manual
  rules:
    - if: $CI_COMMIT_TAG =~ $CI_TAG_PATTERN
      when: manual
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release"
      when: manual

.only_main_or_tag_or_manual:
  rules:
    - !reference [.only_main_or_tag, rules]
    - when: manual

.manual_except_main_branch:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: never
    - if: $CI_COMMIT_TAG =~ $CI_TAG_PATTERN
      when: never
    - when: on_success

.deploy_k8s:
  image: registry.gitlab.procivis.ch/procivis/one/one-operations/az-helm-kubectl:1.27.7
  variables:
    HELM_VALUES_FILE: $VALUES_PATH/main.yaml
    SECRETS_FILE: $VALUES_PATH/secrets.yaml
    DEPLOY_IMAGE_TAG: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
    K8S_TYPE: deployment
    HELM_APP_NAME: one-core
    HELM_PATH: onecorechart
  before_script:
    - az aks install-cli
    - gpg --import "$PGP_PRIVATE_KEY"
    - az login --service-principal -u "$AAD_SERVICE_PRINCIPAL_CLIENT_ID" -p "$AAD_SERVICE_PRINCIPAL_CLIENT_SECRET" --tenant "$AD_TENANT_ID"
    - az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
    - kubelogin convert-kubeconfig -l spn
  script:
    - cd "$HELM_PATH"
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - helm dep build
    - >
      helm upgrade --install $HELM_APP_NAME .
      --values $HELM_VALUES_FILE
      -f secrets://$SECRETS_FILE
      --set "image.tag=$DEPLOY_IMAGE_TAG"
      --namespace $K8S_NAMESPACE
    - kubectl rollout restart $K8S_TYPE $HELM_APP_NAME-$HELM_PATH --namespace=$K8S_NAMESPACE

.cargo_build:
  script:
    - cargo build --release
  artifacts:
    expire_in: 1 hour
    paths:
      - target/release/core-server

.docker_publish:
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN
    - docker build -t $IMAGE_TAG -f docker/Dockerfile .
    - >
      if [ "$CI_COMMIT_REF_NAME" == "main" ] ; then
        docker image tag $IMAGE_TAG $IMAGE_NAME:latest
        docker push $IMAGE_NAME:latest
      fi
    - docker push $IMAGE_TAG
    - docker logout
    - echo "APP_VERSION=${APP_VERSION}" >> build.env
  artifacts:
    reports:
      dotenv: build.env

.run_e2e_tests:
  variables:
    CORE_IMAGE_TAG: ${APP_VERSION}
  trigger:
    project: procivis/one/one-e2e-tests
    branch: main
    strategy: depend

build:
  stage: build
  extends:
    - .cargo_build
    - .only_main_or_tag

tests:
  stage: test
  script:
    - echo "HOME= ${CARGO_HOME}"
    - cargo tarpaulin --skip-clean --ignore-tests --all-features --out xml
  coverage: '/^\d+.\d+% coverage/'
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - target/
      - ${CARGO_HOME}
    policy: pull-push
  artifacts:
    expire_in: 5 hour
    paths:
      - cobertura.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml

#linter:clippy:
#  stage: test
#  script:
#    - cargo clippy --all-targets -- -D warnings
#    - cargo clippy --package sql-data-provider -- -W clippy::expect_used -W clippy::panic -W clippy::unwrap_used
#    - cargo clippy --message-format=json &> report.json
#  artifacts:
#    expire_in: 1 hour
#    paths:
#      - report.json
#
#linter:rustfmt:
#  stage: test
#  script:
#    - cargo fmt --all -- --check
#
#linter:dependencies:
#  stage: test
#  script:
#    - cargo deny check
#  allow_failure: true

#sonarqube-check:
#  stage: test
#  dependencies:
#    - linter:clippy
#    - tests
#  needs:
#    - linter:clippy
#    - tests
#  image:
#    name: sonarsource/sonar-scanner-cli:latest
#    entrypoint: [""]
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
#    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
#  script:
#    - sonar-scanner
#  allow_failure: true
#  extends:
#    - .only_main_or_tag

publish:
  stage: publish
  dependencies: [build]
  extends:
    - .docker_publish
    - .only_main_or_tag

bitrise_ios_sdk:
  stage: sdk_build
  needs:
    - build
    - tests
  variables:
    # ONE-wallet project on Bitrise
    BITRISE_PROJECT_SLUG: 6ee8c26f-6d7b-4bcb-8ddc-be1ba3cd2687
    BITRISE_WORKFLOW: iOS_Core_SDK
  script:
    - >
      /etc/gitrise.sh
      --access-token $BITRISE_API_ACCESS_TOKEN
      --slug $BITRISE_PROJECT_SLUG
      --workflow $BITRISE_WORKFLOW
      --branch "$CI_COMMIT_REF_NAME"
      --env "CI_PIPELINE_ID:$CI_PIPELINE_ID"
      --output "artifacts"
  extends:
    - .only_main_or_tag_manual
  artifacts:
    paths:
      - artifacts
    expire_in: 10 days

build_android_sdk:
  services:
    - docker:dind
  stage: sdk_build
  needs:
    - build
    - tests
  script:
    - export HOSTNAME=$(docker ps -ql)
    - export CROSS_CONTAINER_OPTS='--env="CI_PIPELINE_ID='$CI_PIPELINE_ID'"'
    - makers build_android
  artifacts:
    paths:
      - target/bindings/android
    expire_in: 5 days
  extends:
    - .only_main_or_tag_manual

upload_sdk_artifacts:
  stage: sdk_artifact
  image: mcr.microsoft.com/azure-cli
  needs: [build_android_sdk, bitrise_ios_sdk]
  dependencies: [build_android_sdk, bitrise_ios_sdk]
  extends:
    - .only_main_or_tag
  variables:
    AZURE_CONTAINER_NAME: "core-sdk"
    ANDROID_BUILD_SOURCE_PATH: "target/bindings/android"
    ANDROID_CONTAINER_PATH: "android/${CI_PIPELINE_ID}"
    ANDROID_SDK_DEBUG_FILE: "onecore-debug.aar"
    ANDROID_SDK_RELEASE_FILE: "onecore-release.aar"

    IOS_CONTAINER_PATH: "ios/${CI_PIPELINE_ID}"
    IOS_BUILD_SOURCE_PATH: "artifacts"
    IOS_BUILD_FILE: "deploy.zip"
  script:
    # https://learn.microsoft.com/en-us/cli/azure/storage/blob?view=azure-cli-latest#az-storage-blob-download
    - ANDROID_CONTAINER_PATH_DEBUG=$ANDROID_CONTAINER_PATH/$ANDROID_SDK_DEBUG_FILE
    - ANDROID_CONTAINER_PATH_RELEASE=$ANDROID_CONTAINER_PATH/$ANDROID_SDK_RELEASE_FILE
    - IOS_CONTAINER_PATH=$IOS_CONTAINER_PATH/$IOS_BUILD_FILE
    # Upload Android debug file
    - az storage blob upload -c $AZURE_CONTAINER_NAME -n $ANDROID_CONTAINER_PATH_DEBUG -f $ANDROID_BUILD_SOURCE_PATH/$ANDROID_SDK_DEBUG_FILE
    # Upload Android release file
    - az storage blob upload -c $AZURE_CONTAINER_NAME -n $ANDROID_CONTAINER_PATH_RELEASE -f $ANDROID_BUILD_SOURCE_PATH/$ANDROID_SDK_RELEASE_FILE
    # Upload IOS zip file
    - az storage blob upload -c $AZURE_CONTAINER_NAME -n $IOS_CONTAINER_PATH -f $IOS_BUILD_SOURCE_PATH/$IOS_BUILD_FILE
    - >
      cat <<-EOM
        =========================
        SDK Download links:
        -------------------------
        Android DEBUG: https://onetfstatestorage.blob.core.windows.net/$AZURE_CONTAINER_NAME/$ANDROID_CONTAINER_PATH_DEBUG
        SHA-1: $(sha1sum -b $ANDROID_BUILD_SOURCE_PATH/$ANDROID_SDK_DEBUG_FILE | cut -d " " -f1)
        -------------------------
        Android RELEASE: https://onetfstatestorage.blob.core.windows.net/$AZURE_CONTAINER_NAME/$ANDROID_CONTAINER_PATH_RELEASE
        SHA-1: $(sha1sum -b $ANDROID_BUILD_SOURCE_PATH/$ANDROID_SDK_RELEASE_FILE | cut -d " " -f1)
        -------------------------
        iOS: https://onetfstatestorage.blob.core.windows.net/$AZURE_CONTAINER_NAME/$IOS_CONTAINER_PATH
        SHA-1: $(sha1sum -b $IOS_BUILD_SOURCE_PATH/$IOS_BUILD_FILE | cut -d " " -f1)
        =========================
      EOM

test_e2e:
  stage: e2e_tests
  needs:
    - job: publish
      artifacts: true
  extends:
    - .run_e2e_tests
    - .only_main_or_tag

deploy:dev:
  stage: deploy
  extends:
    - .deploy_k8s
  variables:
    VALUES_PATH: values/dev
    K8S_NAMESPACE: default
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"

deploy:test:
  stage: deploy
  extends:
    - .deploy_k8s
  variables:
    VALUES_PATH: values/test
    K8S_NAMESPACE: one-test
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: manual

run_e2e_tests:
  stage: manual_e2e_tests
  when: manual
  needs: [tests]
  script:
    - echo "Job for trigger manual e2e tests"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+-.+$/'
      when: never
    - when: manual

e2e:build:
  stage: manual_e2e_tests
  needs:
    - job: run_e2e_tests
  extends:
    - .cargo_build
    - .manual_except_main_branch

e2e:publish:
  stage: manual_e2e_tests
  needs:
    - job: e2e:build
  dependencies: [e2e:build]
  extends:
    - .docker_publish
    - .manual_except_main_branch

e2e:trigger_tests:
  stage: manual_e2e_tests
  needs:
    - job: e2e:publish
      artifacts: true
  extends:
    - .run_e2e_tests
    - .manual_except_main_branch

dependency_track:upload-bom:
  stage: scan
  when: manual
  variables:
    D_TRACK_PATH: ${DEPENDENCY_TRACK_BASE_URL}/api/v1/bom
    SBOM_FILE_PATH: "merged_sbom.json"
  extends:
    - .only_main_or_tag_or_manual
  script:
    - cargo cyclonedx -f json
    - FILES="apps/core-server/bom.json apps/migration/bom.json lib/one-core/bom.json lib/shared-types/bom.json lib/sql-data-provider/bom.json platforms/uniffi/bom.json platforms/uniffi-bindgen/bom.json"
    - cyclonedx-cli merge --input-files ${FILES} --input-format=json --output-format=json --group apps > ${SBOM_FILE_PATH}
    - file_content=$(base64 -i $SBOM_FILE_PATH)
    - >
      curl -v -X PUT \
        -H "Content-Type: application/json" \
        -H "X-API-Key: ${DEPENDENCY_TRACK_API_KEY}" \
        --data @- ${D_TRACK_PATH} <<EOF
      {
        "projectName": "${DEPENDENCY_TRACK_PROJECT_NAME}",
        "projectVersion": "${D_TRACK_PROJECT_VERSION}",
        "autoCreate": true,
        "bom": "${file_content}"
      }
      EOF


.dTrack_metrics: &dTrack_metrics
  - base_url=${DEPENDENCY_TRACK_BASE_URL}/api/v1/project/lookup
  - url="${base_url}?name=${DEPENDENCY_TRACK_PROJECT_NAME}&version=${D_TRACK_PROJECT_VERSION}"
  - echo "URL=$url"
  - >
    result=$(curl -X GET "${url}" \
      -H "X-Api-Key: ${DEPENDENCY_TRACK_API_KEY}" \
      -H "Accept: application/json")
  - metrics=$(echo $result | jq -r .metrics)
  - echo "Dependency Track Project Version metrics=${metrics}"

dependency_track:policy_violations:
  stage: scan
  allow_failure: true
  needs:
    - job: dependency_track:upload-bom
  script:
    - *dTrack_metrics
    - violated_licences=$(echo ${metrics} | jq -r .policyViolationsFail)
    - echo "Count of violated_licences=${violated_licences}"
    - >
      if [[ ${violated_licences} -gt 0 ]]; then
        echo "Violated licences more that 0."
        exit 1;
      fi

dependency_track:metrics:
  stage: scan
  allow_failure: true
  needs:
    - job: dependency_track:upload-bom
  script:
    - *dTrack_metrics
    - critical=$(echo ${metrics} | jq -r .critical)
    - high=$(echo ${metrics} | jq -r .high)
    - echo "Critical vulnerabilities=${critical}"
    - echo "High vulnerabilities=${high}"
    - >
      if [[ ${critical} -gt 0  || ${high} -gt 0  ]]; then
          echo "Lib vulnerabilities more that 0."
          exit 1;
      fi
