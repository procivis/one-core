image: $CI_REGISTRY/procivis/one/one-operations/core-base:1.88.0-0.1

include:
  - project: "procivis/one/one-operations"
    file:
      - 'gitlab/client-matrix.yml'
      - "gitlab/docker.gitlab-ci.yml"
      - "gitlab/github.gitlab-ci.yml"
      - "gitlab/rules.gitlab-ci.yml"
      - "gitlab/ci-tools.gitlab-ci.yml"
      - "gitlab/dtrack.gitlab-ci.yml"
      - "gitlab/bitrise.gitlab-ci.yml"

variables:
  DOCKER_DRIVER: overlay2
  DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Core"
  CI_TAG_PATTERN: /^v[0-9]+\.[0-9]+\.[0-9]+-.+$/
  GITHUB_PROJECT: "procivis/one-core"
  GITHUB_TAG_PATTERN: /^v[0-9]+\.[0-9]+\.[0-9]+-.+$/
  CARGO_TARGET_DIR: "/build-cache/target"
  CARGO_HOME: "/build-cache/cargo-home"
  CARGO_UNSTABLE_GC: "true"
  BUILD_IMAGE: $CI_REGISTRY/procivis/one/one-operations/core-base:1.88.0-0.1


  # Required variables in GitLab config:
  # - AAD_SERVICE_PRINCIPAL_CLIENT_ID: Azure Active directory Application id. Use for RBAC SP kubelogin
  # - AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: Application secret. Use for RBAC SP kubelogin
  # - AD_TENANT_ID: Azure Active Directory Tenant ID
  # - RESOURCE_GROUP: Azure Resource group where AKS deployed
  # - CLUSTER_NAME: AKS cluster name
  # - DEMO_RESOURCE_GROUP: Azure Resource group where AKS deployed
  # - DEMO_CLUSTER_NAME: AKS cluster name
  # - DOCKER_AUTH_CONFIG: Pull image from private repository
  # - BITRISE_API_ACCESS_TOKEN: Bitrise access token for IOS sdk build
  # - AZURE_STORAGE_ACCOUNT: storage account for sdk build upload
  # - AZURE_STORAGE_KEY: storage account key
  # - PGP_PRIVATE_KEY: helm-secrets
  # - DEPENDENCY_TRACK_BASE_URL: Base url for SBOM scanning
  # - DEPENDENCY_TRACK_API_KEY: Api key for api access

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG
  auto_cancel:
    on_new_commit: conservative

stages:
  - test
  - docs
  - tests
  - scan
  - publish
  - deploy
  - sdk_build
  - sdk_artifact
  - extra_tests
  - github
  - ci_tools

.app_settings: &app_settings
  - APP_FLAVOR=${APP_FLAVOR:-$(echo $CI_COMMIT_TAG | sed -n "s/^v.*-\(.*\)$/\1/p")}
  - export APP_FLAVOR=${APP_FLAVOR:-procivis}
  - APP_VERSION=$(echo $CI_COMMIT_TAG | sed -n "s/^\(v.*\)-.*$/\1/p")
  - export APP_VERSION=${APP_VERSION:-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA}
  - export IMAGE_NAME=$CI_REGISTRY_IMAGE/$APP_FLAVOR
  - export IMAGE_TAG=$IMAGE_NAME:$APP_VERSION
  - export D_TRACK_PROJECT_VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}
  - export DEPLOY_IMAGE_TAG=$APP_VERSION

before_script:
  - *app_settings

.only_main_or_tag_or_manual:
  rules:
    - !reference [.rule:only_main_or_tag, rules]
    - when: manual

.rule:run_tests:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG =~ $CI_TAG_PATTERN
      when: never
    - when: manual

.rule:except_main_branch:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG =~ $CI_TAG_PATTERN
      when: never
    - when: on_success


.cargo_tests:
  stage: test
  tags:
    - rust
  script:
    - cargo llvm-cov --workspace --lcov --ignore-filename-regex=".*test.*\.rs$|tests/.*\.rs$|migration/.*\.rs$" --output-path lcov.info
    - cargo llvm-cov report --cobertura --output-path cobertura.xml
    - cargo llvm-cov report
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(?:\d+\.\d+)%\s+\d+\s+\d+\s+(?:\d+\.\d+)%\s+\d+\s+\d+\s+(\d+\.\d+)%/'
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - lcov.info
      - cobertura.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml

.run_tests:
  stage: extra_tests
  needs:
    - job: publish
      artifacts: true
  variables:
    CORE_IMAGE_TAG: ${APP_VERSION}
    CHECK_LINT: false
  trigger:
    project: procivis/one/one-tests
    branch: main
    strategy: depend
    forward:
      pipeline_variables: true

tests:mariadb:
  interruptible: true
  extends:
    - .cargo_tests
  variables:
    MYSQL_DATABASE: core_db
    MYSQL_ROOT_PASSWORD: root_password
    ONE_app__databaseUrl: "mysql://root:${MYSQL_ROOT_PASSWORD}@mariadb:3306/${MYSQL_DATABASE}"
  services:
    - alias: mariadb
      name: mariadb:10.9
      pull_policy: always
  before_script:
    - mysql --host=mariadb --user=root --password=$MYSQL_ROOT_PASSWORD -e "SET GLOBAL max_connections = 1000;"

tests:sqlite:
  interruptible: true
  needs: []
  extends:
    - .cargo_tests

linter:clippy:
  interruptible: true
  stage: test
  needs: []
  script:
    - cargo clippy --all-targets --message-format=json -- -D warnings > clippy.json
    - cargo clippy --package sql-data-provider --message-format=json -- -W clippy::expect_used -W clippy::panic -W clippy::unwrap_used >> clippy.json
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - clippy.json

linter:rustfmt:
  interruptible: true
  stage: test
  needs: []
  script:
    - TOOLCHAIN_VERSION=$(rustup toolchain list | grep nightly | head -n1 | awk '{print $1}')
    - cargo +$TOOLCHAIN_VERSION fmt --all -- --check

linter:dependencies:
  interruptible: true
  stage: test
  script:
    - cargo deny --format json check 2> deny.json || true
    - cargo deny check
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - deny.json

sonarqube-check:
  stage: test
  needs:
    - job: linter:clippy
      artifacts: true
    - job: tests:mariadb
      artifacts: true
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  script:
    - sonar-scanner
  allow_failure: true
  extends:
    - .rule:only_main_or_tag

publish:
  stage: publish
  dependencies: []
  extends:
    - .docker_publish
    - .rule:only_main_or_tag
  variables:
    EXTRA_BUILD_ARGS: "--build-arg BASE_IMAGE=$BUILD_IMAGE"

publish_image_acr:
  stage: publish
  dependencies: []
  extends:
    - .docker_acr_publish
    - .only_tag
  variables:
    EXTRA_BUILD_ARGS: "--build-arg BASE_IMAGE=$BUILD_IMAGE"
  parallel:
    matrix: !reference [ .one_core, clients_matrix ]

sdk:ios:bitrise:
  stage: sdk_build
  extends:
    - .bitrise:default
  when: manual
  variables:
    # ONE-wallet project on Bitrise
    BITRISE_PROJECT_SLUG: 6ee8c26f-6d7b-4bcb-8ddc-be1ba3cd2687
    BITRISE_WORKFLOW: iOS_Core_SDK
    ARTIFACTS: true
  artifacts:
    paths:
      - ${ARTIFACTS_DIR}
    expire_in: 10 days

sdk:android:build:
  services:
    - docker:dind
  stage: sdk_build
  tags:
    - rust
  needs: []
  when: manual
  script:
    - export HOSTNAME=$(docker ps -ql)
    - export CROSS_CONTAINER_OPTS='--env="CI_PIPELINE_ID='$CI_PIPELINE_ID'"'
    - export PATH="$CARGO_HOME/bin:$PATH"
    - makers build_android
  after_script:
    - mkdir -p target/bindings/android
    - mv ${CARGO_TARGET_DIR}/bindings/android target/bindings/android
  artifacts:
    paths:
      - target/bindings/android
    expire_in: 5 days

sdk:upload_artifacts:
  stage: sdk_artifact
  image: mcr.microsoft.com/azure-cli
  needs:
    - job: sdk:android:build
      artifacts: true
    - job: sdk:ios:bitrise
      artifacts: true
  variables:
    AZURE_CONTAINER_NAME: "core-sdk"
    ANDROID_BUILD_SOURCE_PATH: "target/bindings/android"
    ANDROID_CONTAINER_PATH: "android/${CI_PIPELINE_ID}"
    ANDROID_SDK_DEBUG_FILE: "onecore-debug.aar"
    ANDROID_SDK_RELEASE_FILE: "onecore-release.aar"
    IOS_CONTAINER_PATH: "ios/${CI_PIPELINE_ID}"
    IOS_BUILD_SOURCE_PATH: "artifacts"
    IOS_BUILD_FILE: "deploy.zip"
    AZURE_STORAGE_URL: "https://onetfstatestorage.blob.core.windows.net"
  script:
    # https://learn.microsoft.com/en-us/cli/azure/storage/blob?view=azure-cli-latest#az-storage-blob-download
    - ANDROID_CONTAINER_PATH_DEBUG=$ANDROID_CONTAINER_PATH/$ANDROID_SDK_DEBUG_FILE
    - ANDROID_CONTAINER_PATH_RELEASE=$ANDROID_CONTAINER_PATH/$ANDROID_SDK_RELEASE_FILE
    - IOS_CONTAINER_PATH=$IOS_CONTAINER_PATH/$IOS_BUILD_FILE
    # Upload Android debug file
    - az storage blob upload --overwrite -c $AZURE_CONTAINER_NAME -n $ANDROID_CONTAINER_PATH_DEBUG -f $ANDROID_BUILD_SOURCE_PATH/$ANDROID_SDK_DEBUG_FILE
    # Upload Android release file
    - az storage blob upload --overwrite -c $AZURE_CONTAINER_NAME -n $ANDROID_CONTAINER_PATH_RELEASE -f $ANDROID_BUILD_SOURCE_PATH/$ANDROID_SDK_RELEASE_FILE
    # Upload IOS zip file
    - az storage blob upload --overwrite -c $AZURE_CONTAINER_NAME -n $IOS_CONTAINER_PATH -f $IOS_BUILD_SOURCE_PATH/$IOS_BUILD_FILE
    # Prepare variables
    - |
      ANDROID_DEBUG_LINK=${AZURE_STORAGE_URL}/$AZURE_CONTAINER_NAME/$ANDROID_CONTAINER_PATH_DEBUG
      ANDROID_DEBUG_SHA1=$(sha1sum -b $ANDROID_BUILD_SOURCE_PATH/$ANDROID_SDK_DEBUG_FILE | cut -d " " -f1)
      ANDROID_RELEASE_LINK=${AZURE_STORAGE_URL}/$AZURE_CONTAINER_NAME/$ANDROID_CONTAINER_PATH_RELEASE
      ANDROID_RELEASE_SHA1=$(sha1sum -b $ANDROID_BUILD_SOURCE_PATH/$ANDROID_SDK_RELEASE_FILE | cut -d " " -f1)
      IOS_LINK=${AZURE_STORAGE_URL}/$AZURE_CONTAINER_NAME/$IOS_CONTAINER_PATH
      IOS_SHA1=$(sha1sum -b $IOS_BUILD_SOURCE_PATH/$IOS_BUILD_FILE | cut -d " " -f1)
    - >
      cat <<-EOM
        =========================
        SDK Download links:
        -------------------------
        Android DEBUG: ${ANDROID_DEBUG_LINK}
        SHA-1: ${ANDROID_DEBUG_SHA1}
        -------------------------
        Android RELEASE: ${ANDROID_RELEASE_LINK}
        SHA-1: ${ANDROID_RELEASE_SHA1}
        -------------------------
        iOS: ${IOS_LINK}
        SHA-1: ${IOS_SHA1}
        =========================
      EOM
    - |
      echo "ANDROID_DEBUG_LINK=${ANDROID_DEBUG_LINK}" > sdk_env_variables.env
      echo "ANDROID_DEBUG_SHA1=${ANDROID_DEBUG_SHA1}" >> sdk_env_variables.env
      echo "ANDROID_RELEASE_LINK=${ANDROID_RELEASE_LINK}" >> sdk_env_variables.env
      echo "ANDROID_RELEASE_SHA1=${ANDROID_RELEASE_SHA1}" >> sdk_env_variables.env
      echo "IOS_LINK=${IOS_LINK}" >> sdk_env_variables.env
      echo "IOS_SHA1=${IOS_SHA1}" >> sdk_env_variables.env
  artifacts:
    paths:
      - sdk_env_variables.env
    reports:
      dotenv: sdk_env_variables.env

sdk:react-native:
  stage: sdk_artifact
  needs:
    - job: sdk:upload_artifacts
      artifacts: true
  variables:
    NEW_VERSION: "1.$CI_PIPELINE_ID.0"
    CI_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: procivis/one/react-native-one-core
    branch: main
    strategy: depend
    forward:
      pipeline_variables: true

sdk:generate_binding_files:
  stage: sdk_build
  needs: []
  when: manual
  script:
    - makers generate_uniffi_interfaces
  artifacts:
    paths:
      - target/uniffi-interface/ch/procivis/one/core/one_core_uniffi.kt
      - target/uniffi-interface/ProcivisOneCore.swift
    expire_in: 10 days

tests:e2e:
  when: manual
  variables:
    FE_E2E_TEST: true
  extends:
    - .run_tests
    - .rule:manual_main_or_tag

tests:api:
  variables:
    API_TEST: "CORE"
  extends:
    - .run_tests
    - .rule:only_main_or_tag

.deploy_trigger:
  stage: deploy
  needs:
    - job: publish
  trigger:
    project: procivis/one/one-operations
    branch: main
    strategy: depend
  variables:
    HELM_PATH: charts/one-core-chart
    HELM_APP_NAME: one-core
    DEPLOY_IMAGE_TAG: $APP_VERSION
    PROJECT_TITLE: $CI_PROJECT_TITLE
    HELM_TIMEOUT: 15m

deploy:dev:
  resource_group: core-dev
  extends:
    - .deploy_trigger
    - .rule:deploy:dev
  variables:
    VALUES_PATH: values/dev
    K8S_NAMESPACE: default
    DEPLOY_ENVIRONMENT: Dev

deploy:test:
  extends:
    - .deploy_trigger
    - .rule:deploy:test
  variables:
    VALUES_PATH: values/test
    K8S_NAMESPACE: one-test
    DEPLOY_ENVIRONMENT: Test

deploy:demo:
  extends:
    - .deploy_trigger
    - .rule:deploy:demo
  variables:
    VALUES_PATH: values/demo
    K8S_NAMESPACE: default
    RESOURCE_GROUP: $DEMO_RESOURCE_GROUP
    CLUSTER_NAME: $DEMO_CLUSTER_NAME
    DEPLOY_ENVIRONMENT: Demo

deploy:canivc:
  extends:
    - .deploy_trigger
    - .rule:deploy:demo
  variables:
    VALUES_PATH: values/canivc
    K8S_NAMESPACE: canivc
    DEPLOY_ENVIRONMENT: Canivc

tests:publish:
  stage: tests
  dependencies: []
  variables:
    EXTRA_BUILD_ARGS: "--build-arg BASE_IMAGE=$BUILD_IMAGE"
  extends:
    - .docker_publish
    - .rule:except_main_branch

trigger_tests:e2e:
  stage: tests
  when: manual
  variables:
    FE_E2E_TEST: true
  needs:
    - job: tests:publish
      artifacts: true
  extends:
    - .run_tests
    - .rule:run_tests

trigger_tests:api:
  stage: tests
  variables:
    API_TEST: "CORE"
  needs:
    - job: tests:publish
      artifacts: true
  extends:
    - .run_tests
    - .rule:except_main_branch

dtrack:generate-bom:
  stage: scan
  needs: []
  variables:
    SBOM_FILE_PATH: "one-core.json"
    SBOM_FILES: >-
      apps/core-server/core-server.cdx.json
      lib/migration/migration.cdx.json
      lib/one-core/one-core.cdx.json
      lib/shared-types/shared-types.cdx.json
      lib/sql-data-provider/sql-data-provider.cdx.json
      platforms/uniffi-bindgen/uniffi-bindgen.cdx.json
      platforms/uniffi/one-core-uniffi.cdx.json
  extends:
    - .rule:only_main_or_tag
  script:
    - cargo cyclonedx -f json
    - >
      cyclonedx-cli merge
      --input-files ${SBOM_FILES}
      --input-format=json
      --output-format=json
      --group apps
      --name "One-Core"
      --output-file ${SBOM_FILE_PATH}
  artifacts:
    when: always
    paths:
      - ${SBOM_FILE_PATH}
    expire_in: 5 days


dtrack:upload-bom:
  stage: scan
  needs:
    - job: dtrack:generate-bom
      artifacts: true
  variables:
    SBOM_FILE_PATH: "one-core.json"
  extends:
    - .dtrack:upload-bom:curl
    - .rule:only_main_or_tag

dtrack:policy_violations:
  stage: scan
  allow_failure: true
  needs:
    - job: dtrack:upload-bom
  extends:
    - .rule:only_main_or_tag
    - .dTrack:validation:policy

dtrack:metrics:
  stage: scan
  allow_failure: true
  needs:
    - job: dtrack:upload-bom
  extends:
    - .rule:only_main_or_tag
    - .dTrack:validation:metrics

github:push:
  stage: github
  variables:
    FILES_TO_ATTACH: >-
      one-core.json
  extends:
    - .ci-tool:open_source_release
  needs:
    - job: dtrack:upload-bom
      artifacts: true

set_jira_version:
  stage: ci_tools
  extends:
    - .ci-tool:set_jira_version
