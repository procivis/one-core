# Docs: https://github.com/sagiegurari/cargo-make

env_files = [
    "./dev.env",
]

[config]
default_to_workspace = false

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.build]
command = "cargo"
args = ["build",  "-p", "core-server"]

[tasks.run]
command = "cargo"
args = ["run", "-p", "core-server"]

[tasks.runw]
command = "cargo"
args = ["watch", "--ignore", "*.md", "--ignore", "*.yaml", "--ignore", "*.yml", "--exec", "make run"]

[tasks.test]
workspace = true
command = "cargo"
args = ["test"]

[tasks.dbstart]
command = "docker-compose"
args = ["-f", "docker/db.yml", "up", "-d" ]

[tasks.dbstop]
command = "docker-compose"
args = ["-f", "docker/db.yml", "down" ]

[tasks.dbdrop]
script = [
    "docker rm --force docker-mariadb-1",
    "docker volume rm docker_mariadb_data",
]

[tasks.install_seaormcli]
command = "cargo"
args = ["install", "sea-orm-cli", "--force", "--version", "0.12.1"]

[tasks.dbup1]
command = "cargo"
args = ["run", "-p", "migration", "--", "up", "-n1"]

[tasks.dbdown1]
command = "cargo"
args = ["run", "-p", "migration", "--", "down", "-n1"]

[tasks.dbtempent]
command = "sea-orm-cli"
args = ["generate", "entity", "--date-time-crate" , "time", "-o", "lib/one-core/src/data_layer/entities_new/" ]


############################################################### ANDROID-UNIFFI
[tasks.add_android_targets]
command = "rustup"
args = ["target", "add", "x86_64-linux-android", "i686-linux-android", "armv7-linux-androideabi", "aarch64-linux-android"]

[tasks.install_cross]
command = "cargo"
args = ["install", "cross", "--git", "https://github.com/cross-rs/cross", "--rev", "1aab4cf"]

[tasks.generateuniffi_android]
script='''
cargo run --features=uniffi/cli -p uniffi-bindgen --bin uniffi-bindgen generate -l kotlin -o target/android_tmp platforms/uniffi/src/one_core.udl
mkdir -p target/uniffi/android/java/one_core/
mv target/android_tmp/uniffi/one_core/* target/uniffi/android/java/one_core
rm -rf target/android_tmp
'''

[tasks.build_android_targets]
script='''
cross build -p one-core-uniffi --target x86_64-linux-android --release
cross build -p one-core-uniffi --target i686-linux-android --release
cross build -p one-core-uniffi --target armv7-linux-androideabi --release
cross build -p one-core-uniffi --target aarch64-linux-android --release
'''

[tasks.collect_android_libs]
script='''
mkdir -p target/uniffi/android/jniLibs/x86_64/
cp target/x86_64-linux-android/release/libone_core_uniffi.so target/uniffi/android/jniLibs/x86_64/libuniffi_one_core.so
mkdir -p target/uniffi/android/jniLibs/x86/
cp target/i686-linux-android/release/libone_core_uniffi.so target/uniffi/android/jniLibs/x86/libuniffi_one_core.so
mkdir -p target/uniffi/android/jniLibs/armeabi-v7a/
cp target/armv7-linux-androideabi/release/libone_core_uniffi.so target/uniffi/android/jniLibs/armeabi-v7a/libuniffi_one_core.so
mkdir -p target/uniffi/android/jniLibs/arm64-v8a/
cp target/aarch64-linux-android/release/libone_core_uniffi.so target/uniffi/android/jniLibs/arm64-v8a/libuniffi_one_core.so
'''

[tasks.build_android_uniffi]
dependencies = ["install_cross", "generateuniffi_android", "build_android_targets", "collect_android_libs"]

############################################################### ANDROID-GRADLE
[tasks.prepare_gradle_build_directory]
dependencies = ["build_android_uniffi"]
script='''
mkdir -p target/platforms/android
cp -r platforms/android/* target/platforms/android/
cp -r target/uniffi/android/* target/platforms/android/onecore/src/main/
'''

[tasks.build_android_gradle]
dependencies = ["prepare_gradle_build_directory"]
script='''
cd target/platforms/android
./gradlew assemble
'''

[tasks.build_android]
dependencies = ["build_android_gradle"]
script='''
mkdir -p target/bindings/android/
cp -r target/platforms/android/onecore/build/outputs/aar/* target/bindings/android/
'''

############################################################### iOS
[tasks.generateuniffi_ios]
script='''
cargo run --features=uniffi/cli -p uniffi-bindgen --bin uniffi-bindgen generate -l swift -o target/uniffi/ios/ platforms/uniffi/src/one_core.udl
'''

[tasks.add_ios_targets]
script='''
rustup toolchain install nightly
rustup target add aarch64-apple-ios-sim --toolchain nightly
rustup target add aarch64-apple-ios x86_64-apple-ios
rustup component add rust-src --toolchain nightly
'''

[tasks.build_ios_code]
script='''
cargo build --package one-core-uniffi --lib --release --target x86_64-apple-ios
cargo +nightly build --package one-core-uniffi --lib --release --target aarch64-apple-ios-sim
cargo build --package one-core-uniffi --lib --release --target aarch64-apple-ios
'''

[tasks.collect_ios_libs]
script="""
sed -i '' 's/^module\\ one_coreFFI/framework\\ module\\ one_coreFFI/' target/uniffi/ios/one_coreFFI.modulemap

find . -type d -name one_coreFFI.framework -exec rm -rf {} \\; 2>/dev/null || true
for arch in "x86_64-apple-ios" "aarch64-apple-ios-sim" "aarch64-apple-ios"
do
  pushd target/$arch/release >/dev/null &&
  mkdir -p one_coreFFI.framework &&
  cd one_coreFFI.framework &&
  mkdir -p Headers Modules Resources &&
  cp ../../../uniffi/ios/one_coreFFI.modulemap ./Modules/module.modulemap &&
  cp ../../../uniffi/ios/one_coreFFI.h ./Headers/one_coreFFI.h &&
  strip -S -x -o ./one_coreFFI -r ../libone_core_uniffi.a 2>/dev/null &&
  cp ../../../../platforms/ios/Info.plist ./Resources &&
  popd >/dev/null
done
"""

[tasks.create_xc_framework]
script='''
lipo -create target/x86_64-apple-ios/release/one_coreFFI.framework/one_coreFFI target/aarch64-apple-ios-sim/release/one_coreFFI.framework/one_coreFFI -output target/aarch64-apple-ios-sim/release/one_coreFFI.framework/one_coreFFI
rm -rf target/one_coreFFI.xcframework || echo 'skip removing'
xcodebuild -create-xcframework -framework target/aarch64-apple-ios/release/one_coreFFI.framework -framework target/aarch64-apple-ios-sim/release/one_coreFFI.framework -output target/one_coreFFI.xcframework
'''

[tasks.package_ios_bindings]
script='''
pushd target >/dev/null
rm -rf bindings/ios && mkdir -p bindings/ios/one_core/Sources/one_core
cp -r one_coreFFI.xcframework bindings/ios/one_core/Sources/
cp uniffi/ios/one_core.swift bindings/ios/one_core/Sources/one_core/
cp ../platforms/ios/Package.swift bindings/ios/one_core/Package.swift
'''

[tasks.build_ios]
dependencies = ["generateuniffi_ios", "add_ios_targets", "build_ios_code", "collect_ios_libs", "create_xc_framework", "package_ios_bindings"]
script='echo "--- output available in target/bindings/ios ---"'
