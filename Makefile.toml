# Docs: https://github.com/sagiegurari/cargo-make

env_files = ["./dev.env"]

[config]
default_to_workspace = false

[tasks.clean]
command = "cargo"
args    = ["clean"]

[tasks.build]
command = "cargo"
args    = ["build", "-p", "core-server"]

[tasks.run]
command = "cargo"
args = [
  "run",
  "-p",
  "core-server",
  "--",
  "--config",
  "config/config-procivis-base.yml",
  "--config",
  "config/config-local.yml",
]

[tasks.runwallet]
command = "cargo"
env = { "ONE_app__serverPort" = "3001", "ONE_app__databaseUrl" = "mysql://core:886eOqVMmlHsayu6Vyxw@localhost:3307/core", "ONE_app__coreBaseUrl" = "http://0.0.0.0:3001" }
args = [
  "run",
  "-p",
  "core-server",
  "--",
  "--config",
  "config/config-procivis-base.yml",
  "--config",
  "config/config-local.yml",
]

[tasks.runw]
command = "cargo"
args    = ["watch", "--ignore", "*.md", "--ignore", "*.yaml", "--ignore", "*.yml", "--exec", "make run"]

[tasks.test]
workspace = true
command   = "cargo"
args      = ["test"]

[tasks.unit-tests]
command = "cargo"
args    = ["test", "--lib"]

[tasks.integration-tests]
command = "cargo"
args    = ["test", "--test", "integration_tests"]

[tasks.dbstart]
command = "docker-compose"
args    = ["-f", "docker/db.yml", "up", "-d"]

[tasks.dbstop]
command = "docker-compose"
args    = ["-f", "docker/db.yml", "down"]

[tasks.dbdrop]
script = [
  "docker rm --force docker-mariadb-1",
  "docker rm --force docker-walletdb-1",
  "docker volume rm docker_mariadb_data",
]

[tasks.install_seaormcli]
command = "cargo"
args    = ["install", "sea-orm-cli", "--force", "--version", "0.12.1"]

[tasks.dbup1]
env     = { "DATABASE_URL" = "mysql://core:886eOqVMmlHsayu6Vyxw@localhost/core" }
command = "cargo"
args    = ["run", "-p", "migration", "--", "up", "-n1"]

[tasks.dbdown1]
env     = { "DATABASE_URL" = "mysql://core:886eOqVMmlHsayu6Vyxw@localhost/core" }
command = "cargo"
args    = ["run", "-p", "migration", "--", "down", "-n1"]

[tasks.generate_migration]
command = "sea-orm-cli"
args    = ["migrate", "generate", "${@}", "-d", "./apps/migration/"]

[tasks.dbtempent]
command = "sea-orm-cli"
args = [
  "generate",
  "entity",
  "--date-time-crate",
  "time",
  "--database-url",
  "mysql://core:886eOqVMmlHsayu6Vyxw@localhost/core",
  "-o",
  "lib/sql-data-provider/src/entity_new/",
]

[tasks.mobile-build]
script.pre = '''
export CARGO_PROFILE_RELEASE_OPT_LEVEL=s
export CARGO_PROFILE_RELEASE_LTO=true
export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
export CARGO_PROFILE_RELEASE_STRIP=symbols
'''

############################################################### ANDROID-UNIFFI
[tasks.add_android_targets]
# x86_64 is skipped due to: https://github.com/rust-lang/rust/issues/109717
command = "rustup"
args    = ["target", "add", "i686-linux-android", "armv7-linux-androideabi", "aarch64-linux-android"]

[tasks.install_cross]
command = "cargo"
args    = ["install", "cross", "--git", "https://github.com/cross-rs/cross", "--rev", "1aab4cf"]

[tasks.generateuniffi_android]
script = '''
cargo run --features=uniffi/cli -p uniffi-bindgen --bin uniffi-bindgen generate -l kotlin -o target/android_tmp platforms/uniffi/src/one_core.udl
mkdir -p target/uniffi/android/java/uniffi/one_core/
mv target/android_tmp/uniffi/one_core/* target/uniffi/android/java/uniffi/one_core
rm -rf target/android_tmp
'''

[tasks.build_android_targets]
extend = "mobile-build"
script.main = '''
for target in "i686-linux-android" "armv7-linux-androideabi" "aarch64-linux-android"
do
  cross build -p one-core-uniffi --target $target --release
done
'''

[tasks.collect_android_libs]
script = '''
mkdir -p target/uniffi/android/jniLibs/x86/
cp target/i686-linux-android/release/libone_core_uniffi.so target/uniffi/android/jniLibs/x86/libuniffi_one_core.so
mkdir -p target/uniffi/android/jniLibs/armeabi-v7a/
cp target/armv7-linux-androideabi/release/libone_core_uniffi.so target/uniffi/android/jniLibs/armeabi-v7a/libuniffi_one_core.so
mkdir -p target/uniffi/android/jniLibs/arm64-v8a/
cp target/aarch64-linux-android/release/libone_core_uniffi.so target/uniffi/android/jniLibs/arm64-v8a/libuniffi_one_core.so
'''

[tasks.build_android_uniffi]
dependencies = ["install_cross", "generateuniffi_android", "build_android_targets", "collect_android_libs"]

############################################################### ANDROID-GRADLE
[tasks.prepare_gradle_build_directory]
dependencies = ["build_android_uniffi"]
script = '''
mkdir -p target/platforms/android
cp -r platforms/android/* target/platforms/android/
cp -r target/uniffi/android/* target/platforms/android/onecore/src/main/
'''

[tasks.build_android_gradle]
dependencies = ["prepare_gradle_build_directory"]
script = '''
cd target/platforms/android
./gradlew assemble
'''

[tasks.build_android]
dependencies = ["build_android_gradle"]
script = '''
mkdir -p target/bindings/android/
cp -r target/platforms/android/onecore/build/outputs/aar/* target/bindings/android/
'''

############################################################### iOS
[tasks.generateuniffi_ios]
script = '''
cargo run --features=uniffi/cli -p uniffi-bindgen --bin uniffi-bindgen generate -l swift -o target/uniffi/ios/ platforms/uniffi/src/one_core.udl
'''

[tasks.add_ios_targets]
script = '''
rustup target add aarch64-apple-ios-sim
rustup target add aarch64-apple-ios x86_64-apple-ios
'''

[tasks.build_ios_code]
extend = "mobile-build"
script.main = '''
cargo build --package one-core-uniffi --lib --release --target x86_64-apple-ios
cargo build --package one-core-uniffi --lib --release --target aarch64-apple-ios-sim
cargo build --package one-core-uniffi --lib --release --target aarch64-apple-ios
'''

[tasks.collect_ios_libs]
script = """
sed -i '' 's/^module\\ one_coreFFI/framework\\ module\\ one_coreFFI/' target/uniffi/ios/one_coreFFI.modulemap

find . -type d -name one_coreFFI.framework -exec rm -rf {} \\; 2>/dev/null || true
for arch in "x86_64-apple-ios" "aarch64-apple-ios-sim" "aarch64-apple-ios"
do
  pushd target/$arch/release >/dev/null &&
  mkdir -p one_coreFFI.framework &&
  cd one_coreFFI.framework &&
  mkdir -p Headers Modules Resources &&
  cp ../../../uniffi/ios/one_coreFFI.modulemap ./Modules/module.modulemap &&
  cp ../../../uniffi/ios/one_coreFFI.h ./Headers/one_coreFFI.h &&
  strip -S -x -o ./one_coreFFI -r ../libone_core_uniffi.a 2>/dev/null &&
  cp ../../../../platforms/ios/Info.plist ./Resources &&
  popd >/dev/null
done
"""

[tasks.create_xc_framework]
script = '''
lipo -create target/x86_64-apple-ios/release/one_coreFFI.framework/one_coreFFI target/aarch64-apple-ios-sim/release/one_coreFFI.framework/one_coreFFI -output target/aarch64-apple-ios-sim/release/one_coreFFI.framework/one_coreFFI
rm -rf target/one_coreFFI.xcframework || echo 'skip removing'
xcodebuild -create-xcframework -framework target/aarch64-apple-ios/release/one_coreFFI.framework -framework target/aarch64-apple-ios-sim/release/one_coreFFI.framework -output target/one_coreFFI.xcframework
'''

[tasks.package_ios_bindings]
script = '''
pushd target >/dev/null
rm -rf bindings/ios && mkdir -p bindings/ios/one_core
cp -r ../platforms/ios/Sources bindings/ios/one_core/
cp -r one_coreFFI.xcframework bindings/ios/one_core/Sources/
cp uniffi/ios/one_core.swift bindings/ios/one_core/Sources/
cp ../platforms/ios/Package.swift bindings/ios/one_core/Package.swift
'''

[tasks.build_ios]
dependencies = [
  "generateuniffi_ios",
  "add_ios_targets",
  "build_ios_code",
  "collect_ios_libs",
  "create_xc_framework",
  "package_ios_bindings",
]
script = 'echo "--- output available in target/bindings/ios ---"'
