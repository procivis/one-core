# Docs: https://github.com/sagiegurari/cargo-make

env_files = ["./dev.env"]

[env]
CARGO_TARGET_DIR = "target"

[config]
default_to_workspace = false

[tasks.clean]
args    = ["clean"]
command = "cargo"

[tasks.build]
args    = ["build", "-p", "core-server"]
command = "cargo"

[tasks.clippy]
args    = ["clippy", "--all-targets", "--", "-D", "clippy::print_stderr", "-D", "clippy::dbg_macro"]
command = "cargo"

[tasks.format]
args      = ["fmt"]
command   = "cargo"
toolchain = "nightly"

[tasks.fmt]
alias = "format"

[tasks.run]
args = [
  "run",
  "-p",
  "core-server",
  "--",
  "--config",
  "config/config-procivis-base.yml",
  "--config",
  "config/config-local.yml",
]
command = "cargo"

[tasks.runwallet]
args = [
  "run",
  "-p",
  "core-server",
  "--",
  "--config",
  "config/config-procivis-base.yml",
  "--config",
  "config/config-local.yml",
]
command = "cargo"
env = { "ONE_app__serverPort" = "3001", "ONE_app__databaseUrl" = "mysql://core:886eOqVMmlHsayu6Vyxw@localhost:3307/core", "ONE_app__coreBaseUrl" = "http://0.0.0.0:3001" }

[tasks.runw]
args    = ["watch", "--ignore", "*.md", "--ignore", "*.yaml", "--ignore", "*.yml", "--exec", "make run"]
command = "cargo"

[tasks.test]
args      = ["test"]
command   = "cargo"
workspace = true

[tasks.unit-tests]
args    = ["test", "--lib"]
command = "cargo"

[tasks.integration-tests]
args    = ["test", "--test", "integration_tests"]
command = "cargo"

[tasks.dbstart]
args    = ["compose", "-f", "docker/db.yml", "up", "-d"]
command = "docker"

[tasks.dbstop]
args    = ["compose", "-f", "docker/db.yml", "down"]
command = "docker"

[tasks.dbdrop]
script = [
  "docker rm --force docker-mariadb-1",
  "docker rm --force docker-walletdb-1",
  "docker volume rm docker_mariadb_data",
]

[tasks.dbup1]
args    = ["run", "-p", "migration", "--", "up", "-n1"]
command = "cargo"
env     = { "DATABASE_URL" = "mysql://core:886eOqVMmlHsayu6Vyxw@localhost/core" }

[tasks.dbdown1]
args    = ["run", "-p", "migration", "--", "down", "-n1"]
command = "cargo"
env     = { "DATABASE_URL" = "mysql://core:886eOqVMmlHsayu6Vyxw@localhost/core" }

[tasks.seaormcli]
install_crate = { crate_name = "sea-orm-cli", version = "1.1.0", binary = "sea-orm-cli", test_arg = "--version" }

[tasks.generate_migration]
args         = ["migrate", "generate", "${@}", "-d", "./apps/migration/"]
command      = "sea-orm-cli"
dependencies = ["seaormcli"]

[tasks.dbtempent]
args = [
  "generate",
  "entity",
  "--date-time-crate",
  "time",
  "--database-url",
  "mysql://core:886eOqVMmlHsayu6Vyxw@localhost/core",
  "-o",
  "lib/sql-data-provider/src/entity_new/",
]
command = "sea-orm-cli"
dependencies = ["seaormcli"]

[tasks.mobile-build]
script.pre = '''
export CARGO_PROFILE_RELEASE_OPT_LEVEL=s
export CARGO_PROFILE_RELEASE_LTO=true
export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
export CARGO_PROFILE_RELEASE_STRIP=symbols
'''

############################################################### UNIFFI
# generates binding interfaces for documentation purposes
[tasks.generate_uniffi_interfaces]
env = { "LIB" = "${CARGO_TARGET_DIR}/release/libone_core_uniffi.so" }
script = '''
cargo build --package one-core-uniffi --lib --release

for language in "swift" "kotlin"
do
  cargo run --features=uniffi/cli -p uniffi-bindgen --bin uniffi-bindgen generate --library $LIB -l $language -o ${CARGO_TARGET_DIR}/uniffi-interface
done
'''

[tasks.generate_uniffi_interfaces.mac]
env = { "LIB" = "${CARGO_TARGET_DIR}/release/libone_core_uniffi.dylib" }

#### Android
[tasks.add_android_targets]
# x86_64 is skipped due to: https://github.com/rust-lang/rust/issues/109717
args    = ["target", "add", "i686-linux-android", "armv7-linux-androideabi", "aarch64-linux-android"]
command = "rustup"

[tasks.install_cross]
args    = ["install", "cross", "--git", "https://github.com/cross-rs/cross", "--tag", "v0.2.5"]
command = "cargo"

[tasks.generate_kotlin]
env = { "LIB" = "${CARGO_TARGET_DIR}/release/libone_core_uniffi.so" }
script = '''
# since the native libraries are built inside cross, we need to build another library in the native environment
cargo build --package one-core-uniffi --lib --release

cargo run --features=uniffi/cli -p uniffi-bindgen --bin uniffi-bindgen generate --library $LIB -l kotlin -o ${CARGO_TARGET_DIR}/android_tmp
mkdir -p ${CARGO_TARGET_DIR}/uniffi/android/java/ch/procivis/one/core
mv ${CARGO_TARGET_DIR}/android_tmp/ch/procivis/one/core/one_core_uniffi.kt ${CARGO_TARGET_DIR}/uniffi/android/java/ch/procivis/one/core/one_core.kt
rm -rf ${CARGO_TARGET_DIR}/android_tmp
'''

[tasks.generate_kotlin.mac]
env = { "LIB" = "${CARGO_TARGET_DIR}/release/libone_core_uniffi.dylib" }

[tasks.build_android_targets]
extend = "mobile-build"
script.main = '''
for target in "i686-linux-android" "armv7-linux-androideabi" "aarch64-linux-android"
do
  cross build -p one-core-uniffi --target $target --release
done
'''

[tasks.collect_android_libs]
script = '''
mkdir -p ${CARGO_TARGET_DIR}/uniffi/android/jniLibs/x86/
cp ${CARGO_TARGET_DIR}/i686-linux-android/release/libone_core_uniffi.so ${CARGO_TARGET_DIR}/uniffi/android/jniLibs/x86/libprocivis_one_core.so
mkdir -p ${CARGO_TARGET_DIR}/uniffi/android/jniLibs/armeabi-v7a/
cp ${CARGO_TARGET_DIR}/armv7-linux-androideabi/release/libone_core_uniffi.so ${CARGO_TARGET_DIR}/uniffi/android/jniLibs/armeabi-v7a/libprocivis_one_core.so
mkdir -p ${CARGO_TARGET_DIR}/uniffi/android/jniLibs/arm64-v8a/
cp ${CARGO_TARGET_DIR}/aarch64-linux-android/release/libone_core_uniffi.so ${CARGO_TARGET_DIR}/uniffi/android/jniLibs/arm64-v8a/libprocivis_one_core.so
'''

[tasks.build_android_uniffi]
dependencies = ["install_cross", "build_android_targets", "generate_kotlin", "collect_android_libs"]

## Android-gradle
[tasks.prepare_gradle_build_directory]
dependencies = ["build_android_uniffi"]
script = '''
mkdir -p ${CARGO_TARGET_DIR}/platforms/android
cp -r platforms/android/* ${CARGO_TARGET_DIR}/platforms/android/
cp -r ${CARGO_TARGET_DIR}/uniffi/android/* ${CARGO_TARGET_DIR}/platforms/android/onecore/src/main/
'''

[tasks.build_android_gradle]
dependencies = ["prepare_gradle_build_directory"]
script = '''
cd ${CARGO_TARGET_DIR}/platforms/android
./gradlew assemble
'''

[tasks.build_android]
dependencies = ["build_android_gradle"]
script = '''
mkdir -p ${CARGO_TARGET_DIR}/bindings/android/
cp -r ${CARGO_TARGET_DIR}/platforms/android/onecore/build/outputs/aar/* ${CARGO_TARGET_DIR}/bindings/android/
'''

#### iOS
[tasks.add_ios_targets]
script = '''
rustup target add aarch64-apple-ios-sim aarch64-apple-ios x86_64-apple-ios
'''

[tasks.build_ios_code]
extend = "mobile-build"
script.main = '''
cargo build --package one-core-uniffi --lib --release --target x86_64-apple-ios
cargo build --package one-core-uniffi --lib --release --target aarch64-apple-ios-sim
cargo build --package one-core-uniffi --lib --release --target aarch64-apple-ios
'''

[tasks.generate_swift]
script = '''
cargo run --features=uniffi/cli -p uniffi-bindgen --bin uniffi-bindgen generate --library ${CARGO_TARGET_DIR}/aarch64-apple-ios/release/libone_core_uniffi.dylib -l swift -o ${CARGO_TARGET_DIR}/uniffi/ios/
'''

[tasks.collect_ios_libs]
script = """
sed -i '' 's/^module\\ one_coreFFI/framework\\ module\\ one_coreFFI/' ${CARGO_TARGET_DIR}/uniffi/ios/one_coreFFI.modulemap

find . -type d -name one_coreFFI.framework -exec rm -rf {} \\; 2>/dev/null || true
for arch in "x86_64-apple-ios" "aarch64-apple-ios-sim" "aarch64-apple-ios"
do
  pushd ${CARGO_TARGET_DIR}/$arch/release >/dev/null &&
  mkdir -p one_coreFFI.framework &&
  cd one_coreFFI.framework &&
  mkdir -p Headers Modules Resources &&
  cp ../../../uniffi/ios/one_coreFFI.modulemap ./Modules/module.modulemap &&
  cp ../../../uniffi/ios/one_coreFFI.h ./Headers/one_coreFFI.h &&
  strip -S -x -o ./one_coreFFI -r ../libone_core_uniffi.a 2>/dev/null &&
  cp ../../../../platforms/ios/Info.plist ./Resources &&
  popd >/dev/null
done
"""

[tasks.create_xc_framework]
script = '''
lipo -create ${CARGO_TARGET_DIR}/x86_64-apple-ios/release/one_coreFFI.framework/one_coreFFI ${CARGO_TARGET_DIR}/aarch64-apple-ios-sim/release/one_coreFFI.framework/one_coreFFI -output ${CARGO_TARGET_DIR}/aarch64-apple-ios-sim/release/one_coreFFI.framework/one_coreFFI
rm -rf ${CARGO_TARGET_DIR}/one_coreFFI.xcframework || echo 'skip removing'
xcodebuild -create-xcframework -framework ${CARGO_TARGET_DIR}/aarch64-apple-ios/release/one_coreFFI.framework -framework ${CARGO_TARGET_DIR}/aarch64-apple-ios-sim/release/one_coreFFI.framework -output ${CARGO_TARGET_DIR}/one_coreFFI.xcframework
'''

[tasks.package_ios_bindings]
script = '''
pushd ${CARGO_TARGET_DIR} >/dev/null
rm -rf bindings/ios && mkdir -p bindings/ios/one_core
cp -r ../platforms/ios/Sources bindings/ios/one_core/
cp -r one_coreFFI.xcframework bindings/ios/one_core/Sources/
cp uniffi/ios/one_core.swift bindings/ios/one_core/Sources/
cp ../platforms/ios/Package.swift bindings/ios/one_core/Package.swift
'''

[tasks.build_ios]
dependencies = [
  "add_ios_targets",
  "build_ios_code",
  "generate_swift",
  "collect_ios_libs",
  "create_xc_framework",
  "package_ios_bindings",
]
script = 'echo "--- output available in ${CARGO_TARGET_DIR}/bindings/ios ---"'

############################################################### API tests
[tasks.install_api_tests]
cwd = "${API_TEST_REPO_PATH}"
description = "Install dependencies for Playwright tests"
script = '''
echo Install api test node_modules
yarn install --cwd api-tests
echo Install test lib node_modules
yarn install --cwd one-tests-lib
echo Installation completed
'''
script_runner = "sh"

[tasks.api_tests]
# dependencies = ["install_api_tests"]
cwd = "${API_TEST_REPO_PATH}"
description = "Run Playwright API tests"
script = '''
cd api-tests
yarn test  --project core
'''
script_runner = "sh"

[tasks.api_tests_report]
cwd = "${API_TEST_REPO_PATH}"
description = "Run Playwright API tests report"
script = '''
cd api-tests
yarn playwright show-report
'''
script_runner = "sh"
