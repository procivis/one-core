namespace one_core {
  [Throws=ConfigParseError]
  OneCoreBinding initialize_core(string data_dir_path);
};

[Error]
enum ConfigParseError {
  "JsonError", "InvalidType", "MissingErrorMessage"
};

[Error]
enum ServiceError {
  "GeneralRuntimeError", "MappingError", "AlreadyExists", "IncorrectParameters", "NotFound", "NotUpdated", "ValidationError", "ConfigValidationError", "TransportProtocolError", "FormatterError", "BitstringError", "Other",
};

dictionary VersionBindingDTO {
  string target;
  string build_time;
  string branch;
  string tag;
  string commit;
  string rust_version;
  string pipeline_id;
};

enum CredentialStateBindingEnum {
  "Created", "Pending", "Offered", "Accepted", "Rejected", "Revoked", "Error"
};

dictionary CredentialSchemaBindingDTO {
  string id;
  string created_date;
  string last_modified;
  string name;
  string format;
  string revocation_method;
};

dictionary ClaimBindingDTO {
  string id;
  string key;
  string data_type;
  string value;
};

dictionary CredentialListItemBindingDTO {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? issuer_did;
  CredentialStateBindingEnum state;
  CredentialSchemaBindingDTO schema;
};

dictionary CredentialDetailBindingDTO {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? issuer_did;
  CredentialStateBindingEnum state;
  sequence<ClaimBindingDTO> claims;
  CredentialSchemaBindingDTO schema;
};

dictionary ProofRequestClaimBindingDTO {
    string id;
    string key;
    string data_type;
    boolean required;
    CredentialSchemaBindingDTO credential_schema;
};

dictionary ProofRequestBindingDTO {
    string id;
    string created_date;
    string last_modified;
    sequence<ProofRequestClaimBindingDTO> claims;
    string verifier_did;
    string transport;
};

dictionary PresentationSubmitCredentialRequestBindingDTO {
    string credential_id;
    sequence<string> submit_claims;
};

[Enum]
interface HandleInvitationResponseBindingEnum {
  CredentialIssuance(string interaction_id, sequence<string> credential_ids);
  ProofRequest(string interaction_id, string proof_id);
};

dictionary ListQueryBindingDTO {
    u32 page;
    u32 page_size;
    string organisation_id;
};

dictionary CredentialListBindingDTO {
    sequence<CredentialListItemBindingDTO> values;
    u64 total_pages;
    u64 total_items;
};

dictionary PresentationDefinitionBindingDTO {
    sequence<PresentationDefinitionRequestGroupBindingDTO> request_groups;
};

dictionary PresentationDefinitionRequestGroupBindingDTO {
    string id;
    string? name;
    string? purpose;
    PresentationDefinitionRuleBindingDTO rule;
    sequence<PresentationDefinitionRequestedCredentialBindingDTO> requested_credentials;
};

dictionary PresentationDefinitionRequestedCredentialBindingDTO {
    string id;
    string? name;
    string? purpose;
    sequence<PresentationDefinitionFieldBindingDTO> fields;
    sequence<string> applicable_credentials;
};

dictionary PresentationDefinitionFieldBindingDTO {
    string id;
    string? name;
    string? purpose;
    boolean required;
    record<string, string> key_map;
};

enum PresentationDefinitionRuleTypeBindingEnum {
  "All", "Pick"
};

dictionary PresentationDefinitionRuleBindingDTO {
    PresentationDefinitionRuleTypeBindingEnum type;
    u32? min;
    u32? max;
    u32? count;
};

dictionary KeyRequestBindingDTO {
    string key_type;
    record<string, string> key_params;
    string name;
    string storage_type;
    record<string, string> storage_params;
};

interface OneCoreBinding {
  VersionBindingDTO version();

  [Throws=ServiceError]
  string create_organisation(string? uuid);

  [Throws=ServiceError]
  string generate_key(string organisation_id, [ByRef] KeyRequestBindingDTO request);

  [Throws=ServiceError]
  string create_local_key_did(string organisation_id, string key_id);

  [Throws=ServiceError]
  HandleInvitationResponseBindingEnum handle_invitation(string url, string did_id);

  [Throws=ServiceError]
  void holder_accept_credential(string interaction_id);

  [Throws=ServiceError]
  void holder_reject_credential(string interaction_id);

  [Throws=ServiceError]
  PresentationDefinitionBindingDTO get_presentation_defintion(string proof_id);

  [Throws=ServiceError]
  void holder_reject_proof(string interaction_id);

  [Throws=ServiceError]
  void holder_submit_proof(string interaction_id, record<string, PresentationSubmitCredentialRequestBindingDTO> submit_credentials);

  [Throws=ServiceError]
  CredentialListBindingDTO get_credentials([ByRef] ListQueryBindingDTO query);

  [Throws=ServiceError]
  CredentialDetailBindingDTO get_credential(string credential_id);

  [Throws=ServiceError]
  ProofRequestBindingDTO get_proof(string proof_id);
};
