namespace one_core {
  OneCore initialize_core(string data_dir_path);
};

[Error]
enum DataLayerError {
  "GeneralRuntimeError", "AlreadyExists", "IncorrectParameters", "RecordNotFound", "RecordNotUpdated", "Other"
};

[Error]
enum OneCoreError {
  "DataLayerError", "SSIError", "FormatterError"
};

dictionary Version {
  string target;
  string build_time;
  string branch;
  string tag;
  string commit;
  string rust_version;
  string pipeline_id;
};

dictionary InvitationResult {
  string issued_credential_id;
};

enum CredentialState {
  "Created", "Pending", "Offered", "Accepted", "Rejected", "Revoked", "Error"
};

enum RevocationMethod {
  "None", "StatusList2021", "Lvvc"
};

enum CredentialFormat {
  "Jwt", "SdJwt", "JsonLd", "Mdoc"
};

enum ClaimDataType {
  "String", "Date", "Number"
};

dictionary CredentialSchema {
  string id;
  string created_date;
  string last_modified;
  string name;
  string organisation_id;
  CredentialFormat format;
  RevocationMethod revocation_method;
};

dictionary Claim {
  string id;
  string key;
  ClaimDataType data_type;
  string value;
};

dictionary Credential {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? issuer_did;
  CredentialState state;
  sequence<Claim> claims;
  CredentialSchema schema;
};

interface OneCore {
  Version version();

  [Throws=DataLayerError]
  string create_organisation(string? uuid);

  [Throws=DataLayerError]
  string create_local_did(string did, string organisation_id);

  [Throws=OneCoreError]
  InvitationResult handle_invitation(string url);

  [Throws=DataLayerError]
  sequence<Credential> get_credentials();
};