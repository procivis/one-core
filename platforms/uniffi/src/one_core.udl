namespace one_core {
  [Throws=ConfigParseError]
  OneCoreBinding initialize_core(string data_dir_path);
};

[Error]
enum ConfigParseError {
  "JsonError", "InvalidType", "MissingErrorMessage"
};

[Error]
enum ServiceError {
  "GeneralRuntimeError", "MappingError", "AlreadyExists", "IncorrectParameters", "NotFound", "NotUpdated", "ValidationError", "ConfigValidationError", "TransportProtocolError", "FormatterError", "Other",
};

dictionary VersionBindingDTO {
  string target;
  string build_time;
  string branch;
  string tag;
  string commit;
  string rust_version;
  string pipeline_id;
};

enum CredentialStateBindingEnum {
  "Created", "Pending", "Offered", "Accepted", "Rejected", "Revoked", "Error"
};

dictionary CredentialSchemaBindingDTO {
  string id;
  string created_date;
  string last_modified;
  string name;
  string format;
  string revocation_method;
};

dictionary ClaimBindingDTO {
  string id;
  string key;
  string data_type;
  string value;
};

dictionary CredentialListItemBindingDTO {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? issuer_did;
  CredentialStateBindingEnum state;
  CredentialSchemaBindingDTO schema;
};

dictionary CredentialDetailBindingDTO {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? issuer_did;
  CredentialStateBindingEnum state;
  sequence<ClaimBindingDTO> claims;
  CredentialSchemaBindingDTO schema;
};

dictionary ProofRequestClaimBindingDTO {
    string id;
    string created_date;
    string last_modified;
    string key;
    string data_type;
    boolean required;
    CredentialSchemaBindingDTO credential_schema;
};

dictionary ProofRequestBindingDTO {
    sequence<ProofRequestClaimBindingDTO> claims;
    string verifier_did;
};

[Enum]
interface HandleInvitationResponseBindingEnum {
  CredentialIssuance(string interaction_id, sequence<CredentialDetailBindingDTO> credentials);
  ProofRequest(ProofRequestBindingDTO proof_request);
};

dictionary ListQueryBindingDTO {
    u32 page;
    u32 page_size;
    string organisation_id;
};

dictionary CredentialListBindingDTO {
    sequence<CredentialListItemBindingDTO> values;
    u64 total_pages;
    u64 total_items;
};

interface OneCoreBinding {
  VersionBindingDTO version();

  [Throws=ServiceError]
  string create_organisation(string? uuid);

  [Throws=ServiceError]
  string create_local_did(string did, string organisation_id);

  [Throws=ServiceError]
  HandleInvitationResponseBindingEnum handle_invitation(string url, string did_id);

  [Throws=ServiceError]
  void holder_accept_credential(string interaction_id);

  [Throws=ServiceError]
  void holder_reject_credential(string interaction_id);

  [Throws=ServiceError]
  void holder_reject_proof();

  [Throws=ServiceError]
  void holder_submit_proof(sequence<string> credential_ids);

  [Throws=ServiceError]
  CredentialListBindingDTO get_credentials([ByRef] ListQueryBindingDTO query);

  [Throws=ServiceError]
  CredentialDetailBindingDTO get_credential(string credential_id);
};
