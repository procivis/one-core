namespace one_core {
  [Throws=BindingError]
  OneCoreBinding initialize_core(string data_dir_path, NativeKeyStorage? key_storage);
};

[Error]
enum BindingError {
  "AlreadyExists", "DbErr", "NotFound", "NotSupported", "ValidationError", "ConfigValidationError", "Uninitialized", "Unknown"
};

[Error]
interface NativeKeyStorageError {
  KeyGenerationFailure(string reason);
  SignatureFailure(string reason);
  Unknown(string reason);
};

dictionary GeneratedKeyBindingDTO {
  bytes key_reference;
  bytes public_key;
};

callback interface NativeKeyStorage {
  [Throws=NativeKeyStorageError]
  GeneratedKeyBindingDTO generate_key(string key_alias);

  [Throws=NativeKeyStorageError]
  bytes sign(bytes key_reference, bytes message);
};

dictionary VersionBindingDTO {
  string target;
  string build_time;
  string branch;
  string tag;
  string commit;
  string rust_version;
  string pipeline_id;
};

dictionary ConfigBindingDTO {
  record<string, string> format;
  record<string, string> exchange;
  record<string, string> transport;
  record<string, string> revocation;
  record<string, string> did;
  record<string, string> datatype;
  record<string, string> key_algorithm;
  record<string, string> key_storage;
};

enum CredentialStateBindingEnum {
  "Created", "Pending", "Offered", "Accepted", "Rejected", "Revoked", "Error"
};

dictionary CredentialSchemaBindingDTO {
  string id;
  string created_date;
  string last_modified;
  string name;
  string format;
  string revocation_method;
};

dictionary ClaimBindingDTO {
  string id;
  string key;
  string data_type;
  string value;
};

enum CredentialRoleBindingDTO {
  "Holder", "Issuer", "Verifier"
};

dictionary CredentialListItemBindingDTO {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? revocation_date;
  string? issuer_did;
  CredentialStateBindingEnum state;
  CredentialSchemaBindingDTO schema;
  CredentialRoleBindingDTO role;
};

dictionary KeyListItemBindingDTO {
  string id;
  string created_date;
  string last_modified;
  string name;
  bytes public_key;
  string key_type;
  string storage_type;
};

dictionary DidListItemBindingDTO {
  string id;
  string created_date;
  string last_modified;
  string name;
  string did;
  DidTypeBindingEnum did_type;
  string did_method;
  boolean deactivated;
};

dictionary CredentialDetailBindingDTO {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? revocation_date;
  string? issuer_did;
  CredentialStateBindingEnum state;
  sequence<ClaimBindingDTO> claims;
  CredentialSchemaBindingDTO schema;
  string? redirect_uri;
  CredentialRoleBindingDTO role;
  string? lvvc_issuance_date;
};

dictionary ProofRequestClaimBindingDTO {
  string id;
  string key;
  string data_type;
  boolean required;
  CredentialSchemaBindingDTO credential_schema;
};

dictionary ProofRequestBindingDTO {
  string id;
  string created_date;
  string last_modified;
  sequence<ProofRequestClaimBindingDTO> claims;
  string? verifier_did;
  string transport;
  string? redirect_uri;
  sequence<CredentialDetailBindingDTO> credentials;
};

dictionary PresentationSubmitCredentialRequestBindingDTO {
  string credential_id;
  sequence<string> submit_claims;
};

[Enum]
interface HandleInvitationResponseBindingEnum {
  CredentialIssuance(string interaction_id, sequence<string> credential_ids);
  ProofRequest(string interaction_id, string proof_id);
};

dictionary ListQueryBindingDTO {
  u32 page;
  u32 page_size;
  string organisation_id;
};

dictionary CredentialSchemaListBindingDTO {
  sequence<CredentialSchemaBindingDTO> values;
  u64 total_pages;
  u64 total_items;
};

dictionary CredentialListQueryBindingDTO {
  u32 page;
  u32 page_size;
  string organisation_id;
  CredentialRoleBindingDTO? role;
  sequence<string>? ids;
};

dictionary CredentialListBindingDTO {
  sequence<CredentialListItemBindingDTO> values;
  u64 total_pages;
  u64 total_items;
};

dictionary PresentationDefinitionBindingDTO {
  sequence<PresentationDefinitionRequestGroupBindingDTO> request_groups;
};

dictionary PresentationDefinitionRequestGroupBindingDTO {
  string id;
  string? name;
  string? purpose;
  PresentationDefinitionRuleBindingDTO rule;
  sequence<PresentationDefinitionRequestedCredentialBindingDTO> requested_credentials;
};

dictionary PresentationDefinitionRequestedCredentialBindingDTO {
  string id;
  string? name;
  string? purpose;
  sequence<PresentationDefinitionFieldBindingDTO> fields;
  sequence<string> applicable_credentials;
};

dictionary PresentationDefinitionFieldBindingDTO {
  string id;
  string? name;
  string? purpose;
  boolean required;
  record<string, string> key_map;
};

enum PresentationDefinitionRuleTypeBindingEnum {
  "All", "Pick"
};

dictionary PresentationDefinitionRuleBindingDTO {
  PresentationDefinitionRuleTypeBindingEnum type;
  u32? min;
  u32? max;
  u32? count;
};

dictionary KeyRequestBindingDTO {
  string organisation_id;
  string key_type;
  record<string, string> key_params;
  string name;
  string storage_type;
  record<string, string> storage_params;
};

enum DidTypeBindingEnum {
  "Local", "Remote"
};

dictionary DidRequestKeysBindingDTO {
  sequence<string> authentication;
  sequence<string> assertion_method;
  sequence<string> key_agreement;
  sequence<string> capability_invocation;
  sequence<string> capability_delegation;
};

dictionary DidRequestBindingDTO {
  string organisation_id;
  string name;
  string did_method;
  DidTypeBindingEnum did_type;
  DidRequestKeysBindingDTO keys;
  record<string, string> params;
};

dictionary CredentialRevocationCheckResponseBindingDTO {
  string credential_id;
  CredentialStateBindingEnum status;
  boolean success;
  string? reason;
};

enum HistoryActionBindingEnum {
  "Accepted",
  "Created",
  "Deactivated",
  "Deleted",
  "Issued",
  "Offered",
  "Rejected",
  "Requested",
  "Revoked",
  "Pending"
};

enum HistoryEntityTypeBindingEnum {
  "Key",
  "Did",
  "Credential",
  "CredentialSchema",
  "Proof",
  "ProofSchema",
  "Organisation",
  "Backup",
};

dictionary HistoryListItemBindingDTO {
  string created_date;
  string id;
  HistoryActionBindingEnum action;
  string? entity_id;
  HistoryEntityTypeBindingEnum entity_type;
  string organisation_id;
};

dictionary HistoryListQueryBindingDTO {
  u32 page;
  u32 page_size;
  string organisation_id;
  string? entity_id;
  HistoryActionBindingEnum? action;
  sequence<HistoryEntityTypeBindingEnum>? entity_types;
  string? created_date_from;
  string? created_date_to;
  string? did_id;
  string? credential_id;
  string? credential_schema_id;
  HistorySearchBindingDTO? search;
};

dictionary HistoryListBindingDTO {
  sequence<HistoryListItemBindingDTO> values;
  u64 total_pages;
  u64 total_items;
};

enum HistorySearchEnumBindingEnum {
  "ClaimName",
  "ClaimValue",
  "CredentialSchemaName",
  "IssuerDid",
  "IssuerName",
  "VerifierDid",
  "VerifierName"
};

dictionary HistorySearchBindingDTO {
  string text;
  HistorySearchEnumBindingEnum? type;
};

dictionary BackupCreateBindingDTO {
  string file;
  UnexportableEntitiesBindingDTO unexportable;
};

dictionary UnexportableEntitiesBindingDTO {
  sequence<CredentialDetailBindingDTO> credentials;
  sequence<KeyListItemBindingDTO> keys;
  sequence<DidListItemBindingDTO> dids;
  u64 total_credentials;
  u64 total_keys;
  u64 total_dids;
};

interface OneCoreBinding {
  VersionBindingDTO version();

  [Throws=BindingError]
  ConfigBindingDTO get_config();

  [Throws=BindingError]
  string create_organisation(string? uuid);

  [Throws=BindingError]
  string generate_key(KeyRequestBindingDTO request);

  [Throws=BindingError]
  string create_did(DidRequestBindingDTO request);

  [Throws=BindingError]
  HandleInvitationResponseBindingEnum handle_invitation(string url, string did_id);

  [Throws=BindingError]
  void holder_accept_credential(string interaction_id);

  [Throws=BindingError]
  void holder_reject_credential(string interaction_id);

  [Throws=BindingError]
  PresentationDefinitionBindingDTO get_presentation_defintion(string proof_id);

  [Throws=BindingError]
  void holder_reject_proof(string interaction_id);

  [Throws=BindingError]
  void holder_submit_proof(string interaction_id, record<string, PresentationSubmitCredentialRequestBindingDTO> submit_credentials);

  [Throws=BindingError]
  void delete_credential(string credential_id);

  [Throws=BindingError]
  CredentialListBindingDTO get_credentials(CredentialListQueryBindingDTO query);

  [Throws=BindingError]
  CredentialDetailBindingDTO get_credential(string credential_id);

  [Throws=BindingError]
  CredentialSchemaListBindingDTO get_credential_schemas(ListQueryBindingDTO query);

  [Throws=BindingError]
  ProofRequestBindingDTO get_proof(string proof_id);

  [Throws=BindingError]
  sequence<CredentialRevocationCheckResponseBindingDTO> check_revocation(sequence<string> credential_ids);

  [Throws=BindingError]
  BackupCreateBindingDTO create_backup(string password, string output_path);

  [Throws=BindingError]
  UnexportableEntitiesBindingDTO backup_info();

  [Throws=BindingError]
  HistoryListBindingDTO get_history_list(HistoryListQueryBindingDTO query);

  [Throws=BindingError]
  void uninitialize(boolean delete_data);
};
