namespace one_core {
  [Throws=BindingError]
  OneCoreBinding initialize_core(string data_dir_path, NativeKeyStorage? key_storage);
};

[Error]
enum BindingError {
  "AlreadyExists",
  "DbErr",
  "NotFound",
  "NotSupported",
  "ValidationError",
  "ConfigValidationError",
  "Uninitialized",
  "IOError",
  "Unknown",
};

[Error]
interface NativeKeyStorageError {
  KeyGenerationFailure(string reason);
  SignatureFailure(string reason);
  Unknown(string reason);
};

dictionary GeneratedKeyBindingDTO {
  bytes key_reference;
  bytes public_key;
};

callback interface NativeKeyStorage {
  [Throws=NativeKeyStorageError]
  GeneratedKeyBindingDTO generate_key(string key_alias);

  [Throws=NativeKeyStorageError]
  bytes sign(bytes key_reference, bytes message);
};

dictionary VersionBindingDTO {
  string target;
  string build_time;
  string branch;
  string tag;
  string commit;
  string rust_version;
  string pipeline_id;
};

dictionary ConfigBindingDTO {
  record<string, string> format;
  record<string, string> exchange;
  record<string, string> revocation;
  record<string, string> did;
  record<string, string> datatype;
  record<string, string> key_algorithm;
  record<string, string> key_storage;
};

enum CredentialStateBindingEnum {
  "Created", "Pending", "Offered", "Accepted", "Rejected", "Revoked", "Error", "Suspended"
};

enum WalletStorageTypeBindingEnum {
  "Hardware", "Software"
};

[Enum]
interface CredentialSchemaTypeBindingEnum {
  ProcivisOneSchema2024();
  FallbackSchema2024();
  Mdoc();
  Other(string value);
};

enum LayoutTypeBindingEnum {
  "Card", "Document", "SingleAttribute"
};

dictionary CredentialSchemaLayoutPropertiesBindingDTO {
  CredentialSchemaBackgroundPropertiesBindingDTO? background;
  CredentialSchemaLogoPropertiesBindingDTO? logo;
  string? primary_attribute;
  string? secondary_attribute;
  string? picture_attribute;
  CredentialSchemaCodePropertiesBindingDTO? code;
};

dictionary CredentialSchemaBackgroundPropertiesBindingDTO {
  string? color;
  string? image;
};

dictionary CredentialSchemaLogoPropertiesBindingDTO {
  string? font_color;
  string? background_color;
  string? image;
};

dictionary CredentialSchemaCodePropertiesBindingDTO {
  string attribute;
  CredentialSchemaCodeTypeBindingDTO type;
};

enum CredentialSchemaCodeTypeBindingDTO {
  "Barcode", "Mrz", "QrCode"
};

dictionary CredentialSchemaBindingDTO {
  string id;
  string created_date;
  string last_modified;
  string name;
  string format;
  string revocation_method;
  WalletStorageTypeBindingEnum? wallet_storage_type;
  string schema_id;
  CredentialSchemaTypeBindingEnum schema_type;
  LayoutTypeBindingEnum? layout_type;
  CredentialSchemaLayoutPropertiesBindingDTO? layout_properties;
};

dictionary ClaimBindingDTO {
  string id;
  string key;
  string data_type;
  ClaimValueBindingDTO value;
};

[Enum]
interface ClaimValueBindingDTO {
  Value(string value);
  Nested(sequence<ClaimBindingDTO> value);
};

enum CredentialRoleBindingDTO {
  "Holder", "Issuer", "Verifier"
};

dictionary CredentialListItemBindingDTO {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? revocation_date;
  string? issuer_did;
  CredentialStateBindingEnum state;
  CredentialSchemaBindingDTO schema;
  CredentialRoleBindingDTO role;
  string? suspend_end_date;
};

dictionary KeyListItemBindingDTO {
  string id;
  string created_date;
  string last_modified;
  string name;
  bytes public_key;
  string key_type;
  string storage_type;
};

dictionary DidListItemBindingDTO {
  string id;
  string created_date;
  string last_modified;
  string name;
  string did;
  DidTypeBindingEnum did_type;
  string did_method;
  boolean deactivated;
};

dictionary CredentialDetailBindingDTO {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? revocation_date;
  string? issuer_did;
  CredentialStateBindingEnum state;
  sequence<ClaimBindingDTO> claims;
  CredentialSchemaBindingDTO schema;
  string? redirect_uri;
  CredentialRoleBindingDTO role;
  string? lvvc_issuance_date;
  string? suspend_end_date;
};

dictionary ProofRequestClaimBindingDTO {
  string id;
  string key;
  string data_type;
  boolean required;
  CredentialSchemaBindingDTO credential_schema;
};

dictionary ProofRequestBindingDTO {
  string id;
  string created_date;
  string last_modified;
  sequence<ProofRequestClaimBindingDTO> claims;
  string? verifier_did;
  string transport;
  string? redirect_uri;
  sequence<CredentialDetailBindingDTO> credentials;
};

dictionary PresentationSubmitCredentialRequestBindingDTO {
  string credential_id;
  sequence<string> submit_claims;
};

[Enum]
interface HandleInvitationResponseBindingEnum {
  CredentialIssuance(string interaction_id, sequence<string> credential_ids);
  ProofRequest(string interaction_id, string proof_id);
};

dictionary ListQueryBindingDTO {
  u32 page;
  u32 page_size;
  string organisation_id;
};

dictionary CredentialSchemaListBindingDTO {
  sequence<CredentialSchemaBindingDTO> values;
  u64 total_pages;
  u64 total_items;
};

enum CredentialListQueryExactColumnBindingEnum {
  "Name"
};

enum SortDirection {
  "Ascending", "Descending"
};

enum SortableCredentialColumnBindingEnum {
  "CreatedDate", "SchemaName", "IssuerDid", "State"
};

enum CredentialListIncludeEntityTypeBindingEnum {
  "LayoutProperties"
};

dictionary CredentialListQueryBindingDTO {
  u32 page;
  u32 page_size;
  SortableCredentialColumnBindingEnum? sort;
  SortDirection? sort_direction;
  string organisation_id;
  string? name;
  sequence<CredentialListQueryExactColumnBindingEnum>? exact;
  CredentialRoleBindingDTO? role;
  sequence<string>? ids;
  sequence<CredentialStateBindingEnum>? status;
  sequence<CredentialListIncludeEntityTypeBindingEnum>? include;
};

dictionary CredentialListBindingDTO {
  sequence<CredentialListItemBindingDTO> values;
  u64 total_pages;
  u64 total_items;
};

dictionary PresentationDefinitionBindingDTO {
  sequence<PresentationDefinitionRequestGroupBindingDTO> request_groups;
};

dictionary PresentationDefinitionRequestGroupBindingDTO {
  string id;
  string? name;
  string? purpose;
  PresentationDefinitionRuleBindingDTO rule;
  sequence<PresentationDefinitionRequestedCredentialBindingDTO> requested_credentials;
};

dictionary PresentationDefinitionRequestedCredentialBindingDTO {
  string id;
  string? name;
  string? purpose;
  sequence<PresentationDefinitionFieldBindingDTO> fields;
  sequence<string> applicable_credentials;
  string? validity_credential_nbf;
};

dictionary PresentationDefinitionFieldBindingDTO {
  string id;
  string? name;
  string? purpose;
  boolean required;
  record<string, string> key_map;
};

enum PresentationDefinitionRuleTypeBindingEnum {
  "All", "Pick"
};

dictionary PresentationDefinitionRuleBindingDTO {
  PresentationDefinitionRuleTypeBindingEnum type;
  u32? min;
  u32? max;
  u32? count;
};

dictionary KeyRequestBindingDTO {
  string organisation_id;
  string key_type;
  record<string, string> key_params;
  string name;
  string storage_type;
  record<string, string> storage_params;
};

enum DidTypeBindingEnum {
  "Local", "Remote"
};

dictionary DidRequestKeysBindingDTO {
  sequence<string> authentication;
  sequence<string> assertion_method;
  sequence<string> key_agreement;
  sequence<string> capability_invocation;
  sequence<string> capability_delegation;
};

dictionary DidRequestBindingDTO {
  string organisation_id;
  string name;
  string did_method;
  DidRequestKeysBindingDTO keys;
  record<string, string> params;
};

enum SortableDidColumnBindingEnum {
  "Name", "CreatedDate", "Method", "Type", "Did", "Deactivated"
};

enum ExactDidFilterColumnBindingEnum {
  "Name", "Did"
};

enum KeyRoleBindingEnum {
  "Authentication", "AssertionMethod", "KeyAgreement", "CapabilityInvocation", "CapabilityDelegation"
};

dictionary DidListQueryBindingDTO {
  u32 page;
  u32 page_size;
  SortableDidColumnBindingEnum? sort;
  SortDirection? sort_direction;
  string organisation_id;
  string? name;
  string? did;
  DidTypeBindingEnum? type;
  boolean? deactivated;
  sequence<ExactDidFilterColumnBindingEnum>? exact;
  sequence<string>? key_algorithms;
  sequence<KeyRoleBindingEnum>? key_roles;
};

dictionary DidListBindingDTO {
  sequence<DidListItemBindingDTO> values;
  u64 total_pages;
  u64 total_items;
};

dictionary CredentialRevocationCheckResponseBindingDTO {
  string credential_id;
  CredentialStateBindingEnum status;
  boolean success;
  string? reason;
};

enum HistoryActionBindingEnum {
  "Accepted",
  "Created",
  "Deactivated",
  "Deleted",
  "Issued",
  "Offered",
  "Reactivated",
  "Rejected",
  "Requested",
  "Revoked",
  "Pending",
  "Suspended",
  "Restored",
};

enum HistoryEntityTypeBindingEnum {
  "Key",
  "Did",
  "Credential",
  "CredentialSchema",
  "Proof",
  "ProofSchema",
  "Organisation",
  "Backup",
};

[Enum]
interface HistoryMetadataBinding {
  UnexportableEntities(UnexportableEntitiesBindingDTO value);
};

dictionary HistoryListItemBindingDTO {
  string created_date;
  string id;
  HistoryActionBindingEnum action;
  string? entity_id;
  HistoryEntityTypeBindingEnum entity_type;
  HistoryMetadataBinding? metadata;
  string organisation_id;
};

dictionary HistoryListQueryBindingDTO {
  u32 page;
  u32 page_size;
  string organisation_id;
  string? entity_id;
  HistoryActionBindingEnum? action;
  sequence<HistoryEntityTypeBindingEnum>? entity_types;
  string? created_date_from;
  string? created_date_to;
  string? did_id;
  string? credential_id;
  string? credential_schema_id;
  HistorySearchBindingDTO? search;
};

dictionary HistoryListBindingDTO {
  sequence<HistoryListItemBindingDTO> values;
  u64 total_pages;
  u64 total_items;
};

enum HistorySearchEnumBindingEnum {
  "ClaimName",
  "ClaimValue",
  "CredentialSchemaName",
  "IssuerDid",
  "IssuerName",
  "VerifierDid",
  "VerifierName"
};

dictionary HistorySearchBindingDTO {
  string text;
  HistorySearchEnumBindingEnum? type;
};

dictionary BackupCreateBindingDTO {
  string history_id;
  string file;
  UnexportableEntitiesBindingDTO unexportable;
};

dictionary UnexportableEntitiesBindingDTO {
  sequence<CredentialDetailBindingDTO> credentials;
  sequence<KeyListItemBindingDTO> keys;
  sequence<DidListItemBindingDTO> dids;
  u64 total_credentials;
  u64 total_keys;
  u64 total_dids;
};

dictionary MetadataBindingDTO {
  string db_version;
  string db_hash;
  string created_at;
};

interface OneCoreBinding {
  VersionBindingDTO version();

  [Throws=BindingError]
  ConfigBindingDTO get_config();

  [Throws=BindingError]
  string create_organisation(string? uuid);

  [Throws=BindingError]
  string generate_key(KeyRequestBindingDTO request);

  [Throws=BindingError]
  string create_did(DidRequestBindingDTO request);

  [Throws=BindingError]
  DidListBindingDTO get_dids(DidListQueryBindingDTO query);

  [Throws=BindingError]
  HandleInvitationResponseBindingEnum handle_invitation(string url, string organisation_id);

  [Throws=BindingError]
  void holder_accept_credential(string interaction_id, string did_id, string? key_id);

  [Throws=BindingError]
  void holder_reject_credential(string interaction_id);

  [Throws=BindingError]
  PresentationDefinitionBindingDTO get_presentation_definition(string proof_id);

  [Throws=BindingError]
  void holder_reject_proof(string interaction_id);

  [Throws=BindingError]
  void holder_submit_proof(string interaction_id, record<string, PresentationSubmitCredentialRequestBindingDTO> submit_credentials, string did_id, string? key_id);

  [Throws=BindingError]
  void delete_credential(string credential_id);

  [Throws=BindingError]
  CredentialListBindingDTO get_credentials(CredentialListQueryBindingDTO query);

  [Throws=BindingError]
  CredentialDetailBindingDTO get_credential(string credential_id);

  [Throws=BindingError]
  CredentialSchemaListBindingDTO get_credential_schemas(ListQueryBindingDTO query);

  [Throws=BindingError]
  ProofRequestBindingDTO get_proof(string proof_id);

  [Throws=BindingError]
  sequence<CredentialRevocationCheckResponseBindingDTO> check_revocation(sequence<string> credential_ids);

  [Throws=BindingError]
  BackupCreateBindingDTO create_backup(string password, string output_path);

  [Throws=BindingError]
  UnexportableEntitiesBindingDTO backup_info();

  [Throws=BindingError]
  MetadataBindingDTO unpack_backup(string password, string input_path);

  [Throws=BindingError]
  void finalize_import();

  [Throws=BindingError]
  void rollback_import();

  [Throws=BindingError]
  HistoryListBindingDTO get_history_list(HistoryListQueryBindingDTO query);

  [Throws=BindingError]
  HistoryListItemBindingDTO get_history_entry(string history_id);

  [Throws=BindingError]
  void uninitialize(boolean delete_data);
};
