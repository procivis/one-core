namespace one_core {
  [Throws=ConfigParseError]
  OneCore initialize_core(string data_dir_path);
};

[Error]
enum ConfigParseError {
  "JsonError", "InvalidType"
};

[Error]
enum DataLayerError {
  "GeneralRuntimeError", "AlreadyExists", "IncorrectParameters", "ConfigValidationError", "RecordNotFound", "RecordNotUpdated", "MappingError", "Other"
};

[Error]
enum ServiceError {
  "GeneralRuntimeError", "MappingError", "AlreadyExists", "IncorrectParameters", "NotFound", "NotUpdated", "ValidationError", "ConfigValidationError", "Other",
};

[Error]
enum OneCoreError {
  "DataLayerError", "ServiceError", "SSIError", "FormatterError"
};

dictionary Version {
  string target;
  string build_time;
  string branch;
  string tag;
  string commit;
  string rust_version;
  string pipeline_id;
};

enum CredentialState {
  "Created", "Pending", "Offered", "Accepted", "Rejected", "Revoked", "Error"
};

dictionary CredentialSchema {
  string id;
  string created_date;
  string last_modified;
  string name;
  string organisation_id;
  string format;
  string revocation_method;
};

dictionary Claim {
  string id;
  string key;
  string data_type;
  string value;
};

dictionary Credential {
  string id;
  string created_date;
  string issuance_date;
  string last_modified;
  string? issuer_did;
  CredentialState state;
  sequence<Claim> claims;
  CredentialSchema schema;
};

dictionary ProofRequestClaim {
    string id;
    string created_date;
    string last_modified;
    string key;
    string data_type;
    boolean required;
    CredentialSchema credential_schema;
};

dictionary ProofRequest {
    sequence<ProofRequestClaim> claims;
};

[Enum]
interface HandleInvitationResponse {
  InvitationResponseCredentialIssuance(string issued_credential_id);
  InvitationResponseProofRequest(ProofRequest proof_request);
};

interface OneCore {
  Version version();

  [Throws=ServiceError]
  string create_organisation(string? uuid);

  [Throws=ServiceError]
  string create_local_did(string did, string organisation_id);

  [Throws=OneCoreError]
  HandleInvitationResponse handle_invitation(string url);

  [Throws=OneCoreError]
  void holder_reject_proof();

  [Throws=OneCoreError]
  void holder_submit_proof(sequence<string> credential_ids);

  [Throws=DataLayerError]
  sequence<Credential> get_credentials();
};
